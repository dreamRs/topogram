% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/topogram.R
\name{topogram}
\alias{topogram}
\title{Cartogram htmlwidget for visualizing geographical data by distorting a TopoJson topology}
\usage{
topogram(
  shape,
  value,
  label = "{value}",
  palette = "viridis",
  na_color = "#808080",
  n_iteration = 20,
  projection = "geoMercator",
  layerId = NULL,
  width = NULL,
  height = NULL,
  elementId = NULL
)
}
\arguments{
\item{shape}{An \code{sf} object. For the time being, shape must be projected in Mercator (CRS 4326).}

\item{value}{Variable name to use to distort topology.}

\item{label}{\code{glue} string to be used in tooltip, you can use HTML tags in it.}

\item{palette}{Name of a color palette, such as \code{"viridis"}, \code{"Blues"}, ... Or a function to map data values to colors, see \code{\link[scales:col_numeric]{scales::col_numeric()}}.}

\item{n_iteration}{Number of iterations to run the algorithm for. Higher numbers distorts the areas closer to their associated value,
at the cost of performance.}

\item{projection}{Name of a projection, see available ones here: https://github.com/d3/d3-geo-projection}

\item{layerId}{A formula, the layer id to specify value returned by \verb{input$<ID>_click} in 'shiny' application.}

\item{width}{A numeric input in pixels.}

\item{height}{A numeric input in pixels.}

\item{elementId}{Use an explicit element ID for the widget.}
}
\description{
Continuous area cartograms with \code{d3.js}
}
\examples{

## Example from sf

library(topogram)
library(sf)

demo(nc, ask = FALSE, echo = FALSE)

# Create a cartogram
topogram(
  shape = nc,
  value = "NWBIR74",
  tooltip_label = ~NAME
)


# if you pass several values, a dropdown menu
# will be added on top of the cartogram
# to interactively select variable to use
topogram(
  shape = nc,
  value = c("BIR74", "NWBIR74", "BIR79", "NWBIR79"),
  tooltip_label = ~NAME
)


## World example

library(topogram)
library(sf)
library(rnaturalearth)

wrld <- st_as_sf(countries110)
# doesn't support missing values !
wrld <- wrld[!is.na(wrld$pop_est), c("name", "pop_est", "gdp_md_est")]
# Antarctica is not a whole polygon
wrld <- wrld[wrld$name != "Antarctica", ]

topogram(
  shape = wrld,
  value = "pop_est",
  tooltip_label = ~name,
  n_iteration = 50
)

topogram(
  shape = wrld,
  value = c("pop_est", "gdp_md_est"),
  tooltip_label = ~name,
  n_iteration = 30
)
}
